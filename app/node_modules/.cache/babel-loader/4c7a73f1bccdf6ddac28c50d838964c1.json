{"ast":null,"code":"import _objectSpread from \"/Users/petarpenkov/Documents/fitness-fe-master/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/petarpenkov/Documents/fitness-fe-master/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/petarpenkov/Documents/fitness-fe-master/app/src/module/components/modals/DetailsModal.js\";\nimport React, { useState, useEffect } from 'react';\nimport { View, Text, ScrollView, ImageBackground, Button, Dimensions, TouchableOpacity, Image } from 'react-native';\nimport { colors, headers, basicStyles } from 'styles';\nimport TitledGroupBox from '../TitledGroupBox';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { workoutPlanMock } from 'static/mockObjects';\nimport WhiteOutlinedButton from 'module/components/buttons/WhiteOutlinedButton';\nimport CloseButton from 'module/components/buttons/CloseButton';\nimport CustomInput from '../CustomInput';\nimport ModalTitle from 'module/components/modals/components/ModalTitle';\nimport StandardButton from 'module/components/buttons/StandardButton';\nimport { updateWorkout } from 'redux/actions/data.actions';\nimport { useDispatch } from 'react-redux';\nimport { dateToIsoConverter } from 'services/stringHelpers';\nimport checkboxPNG from 'assets/icons-for-web/checkbox.png';\nimport TextAndPictureModal from 'module/components/modals/TextAndPictureModal';\nexport default function DetailsModal({\n  history,\n  setDetailsModal,\n  detailsModal\n}) {\n  const window = Dimensions.get('window');\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        finishedWorkout = _useState2[0],\n        setFinishedWorkout = _useState2[1];\n\n  const _useState3 = useState({\n    window\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        dimensions = _useState4[0],\n        setDimensions = _useState4[1];\n\n  const _useState5 = useState(detailsModal.exercises),\n        _useState6 = _slicedToArray(_useState5, 2),\n        exercises = _useState6[0],\n        setExercises = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        textAndPictureModalInfo = _useState8[0],\n        setOpenTextAndPictureModal = _useState8[1];\n\n  const _useState9 = useState({\n    hours: 0,\n    min: 0\n  }),\n        _useState10 = _slicedToArray(_useState9, 2),\n        timeEstimated = _useState10[0],\n        setTimeEstimated = _useState10[1]; // console.log(detailsModal);\n\n\n  const onChange = ({\n    window,\n    screen\n  }) => {\n    setDimensions({\n      window\n    });\n  };\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    Dimensions.addEventListener('change', onChange);\n    return () => {\n      Dimensions.removeEventListener('change', onChange);\n    };\n  });\n  return React.createElement(ImageBackground, {\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      backgroundImage: `linear-gradient(to bottom right, ${colors.themePrimary(100)}, ${colors.themePrimary(50)}, ${colors.themePrimary(70)}, ${colors.themeSecoundary(50)},  ${colors.themeSecoundary(100)} )`\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(TouchableOpacity, {\n    onPress: () => {\n      setDetailsModal(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(ImageBackground, {\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })), React.createElement(View, {\n    style: {\n      top: dimensions.window.height * 0.1,\n      marginLeft: dimensions.window.width * 0.33,\n      marginRight: dimensions.window.width * 0.33,\n      height: dimensions.window.height * 0.8,\n      backgroundColor: 'white',\n      boxShadow: '-10px 12px 11px -1px rgba(0,0,0,0.2)',\n      overflow: 'auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(View, {\n    style: {\n      position: 'absolute',\n      zIndex: 120,\n      width: 55,\n      height: 55,\n      right: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(CloseButton, {\n    title: \"close\",\n    onPress: () => {\n      'propagated to this also';\n      setDetailsModal(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })), React.createElement(ModalTitle, {\n    title: 'Daily workout details',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(View, {\n    style: {\n      padding: 40,\n      paddingBottom: 0,\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(TitledGroupBox, {\n    style: {\n      padding: 30,\n      flex: 1\n    },\n    titleStyle: headers.H4('black', 'Light'),\n    title: 'Day exercises',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(View, {\n    style: [basicStyles.scrollView],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(View, {\n    style: {\n      paddingBottom: 30\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Text, {\n    style: [headers.H5(null, 'Medium')],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, detailsModal.dailyWorkoutName)), exercises.map((el, index) => {\n    return React.createElement(View, {\n      style: {\n        flexDirection: 'row',\n        paddingBottom: 7,\n        paddingTop: 7,\n        backgroundColor: el.previewButtonVisible ? colors.themeSecoundary(15) : colors.themeSecoundary(7),\n        borderRadius: 5,\n        marginBottom: 10\n      },\n      onMouseEnter: () => {\n        el.previewButtonVisible = true; // console.log([...exercises]);\n\n        setExercises([...exercises]);\n      },\n      onMouseLeave: () => {\n        el.previewButtonVisible = false;\n        setExercises([...exercises]);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(View, {\n      style: {\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Text, {\n      style: [headers.H5(null, 'Italic'), {\n        flex: 1,\n        paddingLeft: 10,\n        paddingRight: 10\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, ' ', \"Exercise \", index + 1, \":\", ' ', React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Text, {\n      style: [headers.H5(null, 'Medium')],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \" \", el.name, \" \"), \" for \", el.numReps, \" reps for\", ' ', el.numSets, \" sets\")), React.createElement(WhiteOutlinedButton, {\n      title: 'Preview',\n      color: colors.themeSecoundary(),\n      style: {\n        opacity: el.previewButtonVisible ? 1 : 0,\n        backgroundColor: 'transparent',\n        padding: 5,\n        marginRight: 10\n      },\n      titleStyle: headers.H6(colors.themeSecoundary(), 'Bold'),\n      onPress: () => {\n        // setDetailsPropObj(el);\n        setOpenTextAndPictureModal(el);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })));\n  })))), !detailsModal.withoutCompletedView && React.createElement(View, {\n    style: {\n      paddingTop: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, !detailsModal.isCompleted && React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(Text, {\n    style: [headers.H4('black', 'Light'), {\n      width: 230\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \" Completed the workout \"), React.createElement(Checkbox, {\n    color: \"primary\",\n    name: \" Set finished workot\",\n    inputProps: {\n      'aria-label': 'secondary checkbox'\n    },\n    onChange: el => {\n      setFinishedWorkout(!finishedWorkout);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  })), detailsModal.isCompleted && React.createElement(View, {\n    style: {\n      alignItems: 'flexStart',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(Image, {\n    source: checkboxPNG,\n    style: {\n      width: 75,\n      height: 50\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), React.createElement(Text, {\n    style: [headers.H4('black', 'Bold'), {\n      width: 230,\n      textAlign: 'center',\n      paddingBottom: 20\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, ' ', \"This workout is completed!\", ' '), React.createElement(Text, {\n    style: [headers.H4('black', 'Light'), {\n      width: 230,\n      textAlign: 'center'\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, ' ', \"Total time spent \", React.createElement(Text, {\n    style: [headers.H4('black', 'Medium')],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, ' ', Math.floor(detailsModal.hoursSpent), ' '), ' ', \"hours and\", ' ', React.createElement(Text, {\n    style: [headers.H4('black', 'Medium')],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, Math.floor((detailsModal.hoursSpent - Math.floor(detailsModal.hoursSpent)) * 60), ' '), ' ', \"minutes.\", ' ')), finishedWorkout && React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(Text, {\n    style: [headers.H4('black', 'Light')],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, \" Estimated time \"), React.createElement(CustomInput, {\n    maxSize: 50,\n    value: timeEstimated.hours,\n    setValue: value => {\n      setTimeEstimated(_objectSpread({}, timeEstimated, {\n        hours: +value.name ? +value.name : value.name === '' ? 0 : timeEstimated.hours\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }), React.createElement(Text, {\n    style: [headers.H4('black', 'Light')],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, \" h \"), React.createElement(CustomInput, {\n    maxSize: 50,\n    value: timeEstimated.min,\n    setValue: value => {\n      // console.log(value);\n      setTimeEstimated(_objectSpread({}, timeEstimated, {\n        min: +value.name ? +value.name : value.name === '' ? 0 : timeEstimated.min\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }), React.createElement(Text, {\n    style: [headers.H4('black', 'Light')],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, \" min \")))), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      justifyContent: 'flex-end',\n      padding: 20,\n      marginRight: 20,\n      marginTop: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, React.createElement(StandardButton, {\n    disabled: (!finishedWorkout || !timeEstimated.hours && !timeEstimated.min) && !detailsModal.isCompleted,\n    title: detailsModal.isCompleted ? 'Close' : 'Submit',\n    color: colors.themeActive(),\n    style: {\n      borderRadius: 5,\n      paddingLeft: 40,\n      paddingRight: 40,\n      paddingTop: 12,\n      paddingBottom: 12\n    },\n    hasShadow: true,\n    onPress: () => {\n      if (!detailsModal.isCompleted) {\n        // console.log(timeEstimated.hours, timeEstimated.min, timeEstimated.hours + timeEstimated.min / 60);\n        let date = dateToIsoConverter(new Date(detailsModal.dateTrained)); // console.log(date);\n\n        dispatch(updateWorkout(detailsModal.dailyWorkoutId, date, timeEstimated.hours + timeEstimated.min / 60, true));\n      }\n\n      setDetailsModal(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }))), textAndPictureModalInfo && React.createElement(TextAndPictureModal, {\n    setModalOpen: setOpenTextAndPictureModal,\n    title: textAndPictureModalInfo.name,\n    text: textAndPictureModalInfo.description,\n    imageSource: textAndPictureModalInfo.imageUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/petarpenkov/Documents/fitness-fe-master/app/src/module/components/modals/DetailsModal.js"],"names":["React","useState","useEffect","View","Text","ScrollView","ImageBackground","Button","Dimensions","TouchableOpacity","Image","colors","headers","basicStyles","TitledGroupBox","Checkbox","workoutPlanMock","WhiteOutlinedButton","CloseButton","CustomInput","ModalTitle","StandardButton","updateWorkout","useDispatch","dateToIsoConverter","checkboxPNG","TextAndPictureModal","DetailsModal","history","setDetailsModal","detailsModal","window","get","finishedWorkout","setFinishedWorkout","dimensions","setDimensions","exercises","setExercises","textAndPictureModalInfo","setOpenTextAndPictureModal","hours","min","timeEstimated","setTimeEstimated","onChange","screen","dispatch","addEventListener","removeEventListener","position","top","left","width","height","backgroundImage","themePrimary","themeSecoundary","marginLeft","marginRight","backgroundColor","boxShadow","overflow","zIndex","right","padding","paddingBottom","flex","H4","scrollView","H5","dailyWorkoutName","map","el","index","flexDirection","paddingTop","previewButtonVisible","borderRadius","marginBottom","alignItems","paddingLeft","paddingRight","name","numReps","numSets","opacity","H6","withoutCompletedView","isCompleted","justifyContent","textAlign","Math","floor","hoursSpent","value","marginTop","themeActive","date","Date","dateTrained","dailyWorkoutId","description","imageUrl"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Text, ScrollView, ImageBackground, Button, Dimensions, TouchableOpacity, Image } from 'react-native';\nimport { colors, headers, basicStyles } from 'styles';\nimport TitledGroupBox from '../TitledGroupBox';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { workoutPlanMock } from 'static/mockObjects';\nimport WhiteOutlinedButton from 'module/components/buttons/WhiteOutlinedButton';\nimport CloseButton from 'module/components/buttons/CloseButton';\n\nimport CustomInput from '../CustomInput';\nimport ModalTitle from 'module/components/modals/components/ModalTitle';\nimport StandardButton from 'module/components/buttons/StandardButton';\nimport { updateWorkout } from 'redux/actions/data.actions';\nimport { useDispatch } from 'react-redux';\nimport { dateToIsoConverter } from 'services/stringHelpers';\nimport checkboxPNG from 'assets/icons-for-web/checkbox.png';\nimport TextAndPictureModal from 'module/components/modals/TextAndPictureModal';\n\nexport default function DetailsModal({ history, setDetailsModal, detailsModal }) {\n    const window = Dimensions.get('window');\n    const [finishedWorkout, setFinishedWorkout] = useState(false);\n    const [dimensions, setDimensions] = useState({ window });\n    const [exercises, setExercises] = useState(detailsModal.exercises);\n    const [textAndPictureModalInfo, setOpenTextAndPictureModal] = useState(false);\n    const [timeEstimated, setTimeEstimated] = useState({\n        hours: 0,\n        min: 0,\n    });\n    // console.log(detailsModal);\n    const onChange = ({ window, screen }) => {\n        setDimensions({ window });\n    };\n    const dispatch = useDispatch();\n    useEffect(() => {\n        Dimensions.addEventListener('change', onChange);\n        return () => {\n            Dimensions.removeEventListener('change', onChange);\n        };\n    });\n    return (\n        <ImageBackground\n            style={{\n                position: 'fixed',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                backgroundImage: `linear-gradient(to bottom right, ${colors.themePrimary(100)}, ${colors.themePrimary(50)}, ${colors.themePrimary(\n                    70\n                )}, ${colors.themeSecoundary(50)},  ${colors.themeSecoundary(100)} )`,\n            }}\n        >\n            <TouchableOpacity\n                onPress={() => {\n                    setDetailsModal(false);\n                }}\n            >\n                <ImageBackground style={{ position: 'fixed', top: 0, left: 0, width: '100%', height: '100%' }} />\n            </TouchableOpacity>\n\n            <View\n                style={{\n                    top: dimensions.window.height * 0.1,\n                    marginLeft: dimensions.window.width * 0.33,\n                    marginRight: dimensions.window.width * 0.33,\n                    height: dimensions.window.height * 0.8,\n                    backgroundColor: 'white',\n                    boxShadow: '-10px 12px 11px -1px rgba(0,0,0,0.2)',\n                    overflow: 'auto',\n                }}\n            >\n                <View style={{ position: 'absolute', zIndex: 120, width: 55, height: 55, right: 0 }}>\n                    <CloseButton\n                        title=\"close\"\n                        onPress={() => {\n                            ('propagated to this also');\n                            setDetailsModal(false);\n                        }}\n                    ></CloseButton>\n                </View>\n                {/* <View\n                    style={{\n                        marginLeft: 25,\n                        borderBottomWidth: 1,\n                        paddingTop: 10,\n                        paddingBottom: 10,\n                        borderBottomColor: colors.borderGrayColor(30),\n                        marginRight: 20,\n                    }}\n                >\n                    <Text style={[headers.H1('black', 'Light')]}> Choose your workout</Text>\n                </View> */}\n                <ModalTitle title={'Daily workout details'}></ModalTitle>\n                <View style={{ padding: 40, paddingBottom: 0, flex: 1 }}>\n                    <TitledGroupBox style={{ padding: 30, flex: 1 }} titleStyle={headers.H4('black', 'Light')} title={'Day exercises'}>\n                        <View style={[basicStyles.scrollView]}>\n                            <ScrollView>\n                                <View style={{ paddingBottom: 30 }}>\n                                    <Text style={[headers.H5(null, 'Medium')]}>{detailsModal.dailyWorkoutName}</Text>\n                                </View>\n                                {exercises.map((el, index) => {\n                                    return (\n                                        <View\n                                            style={{\n                                                flexDirection: 'row',\n                                                paddingBottom: 7,\n                                                paddingTop: 7,\n                                                backgroundColor: el.previewButtonVisible ? colors.themeSecoundary(15) : colors.themeSecoundary(7),\n                                                borderRadius: 5,\n                                                marginBottom: 10,\n                                            }}\n                                            onMouseEnter={() => {\n                                                el.previewButtonVisible = true;\n                                                // console.log([...exercises]);\n                                                setExercises([...exercises]);\n                                            }}\n                                            onMouseLeave={() => {\n                                                el.previewButtonVisible = false;\n                                                setExercises([...exercises]);\n                                            }}\n                                        >\n                                            <View style={{ flex: 1, flexDirection: 'row', alignItems: 'center' }}>\n                                                <Text style={[headers.H5(null, 'Italic'), { flex: 1, paddingLeft: 10, paddingRight: 10 }]}>\n                                                    {' '}\n                                                    Exercise {index + 1}:{' '}\n                                                    <Text>\n                                                        <Text style={[headers.H5(null, 'Medium')]}> {el.name} </Text> for {el.numReps} reps for{' '}\n                                                        {el.numSets} sets\n                                                    </Text>\n                                                </Text>\n                                                {\n                                                    <WhiteOutlinedButton\n                                                        title={'Preview'}\n                                                        color={colors.themeSecoundary()}\n                                                        style={{\n                                                            opacity: el.previewButtonVisible ? 1 : 0,\n                                                            backgroundColor: 'transparent',\n                                                            padding: 5,\n                                                            marginRight: 10,\n                                                        }}\n                                                        titleStyle={headers.H6(colors.themeSecoundary(), 'Bold')}\n                                                        onPress={() => {\n                                                            // setDetailsPropObj(el);\n                                                            setOpenTextAndPictureModal(el);\n                                                        }}\n                                                    ></WhiteOutlinedButton>\n                                                }\n                                            </View>\n                                        </View>\n                                    );\n                                })}\n                            </ScrollView>\n                        </View>\n                    </TitledGroupBox>\n                    {!detailsModal.withoutCompletedView && (\n                        <View style={{ paddingTop: 10 }}>\n                            {!detailsModal.isCompleted && (\n                                <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                                    <Text style={[headers.H4('black', 'Light'), { width: 230 }]}> Completed the workout </Text>\n                                    <Checkbox\n                                        color=\"primary\"\n                                        name=\" Set finished workot\"\n                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                        onChange={el => {\n                                            setFinishedWorkout(!finishedWorkout);\n                                        }}\n                                    />\n                                </View>\n                            )}\n                            {detailsModal.isCompleted && (\n                                <View style={{ alignItems: 'flexStart', justifyContent: 'center', alignItems: 'center' }}>\n                                    <Image source={checkboxPNG} style={{ width: 75, height: 50 }} />\n                                    <Text style={[headers.H4('black', 'Bold'), { width: 230, textAlign: 'center', paddingBottom: 20 }]}>\n                                        {' '}\n                                        This workout is completed!{' '}\n                                    </Text>\n                                    <Text style={[headers.H4('black', 'Light'), { width: 230, textAlign: 'center' }]}>\n                                        {' '}\n                                        Total time spent <Text style={[headers.H4('black', 'Medium')]}>\n                                            {' '}\n                                            {Math.floor(detailsModal.hoursSpent)}{' '}\n                                        </Text>{' '}\n                                        hours and{' '}\n                                        <Text style={[headers.H4('black', 'Medium')]}>\n                                            {Math.floor((detailsModal.hoursSpent - Math.floor(detailsModal.hoursSpent)) * 60)}{' '}\n                                        </Text>{' '}\n                                        minutes.{' '}\n                                    </Text>\n                                </View>\n                            )}\n                            {finishedWorkout && (\n                                <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                                    <Text style={[headers.H4('black', 'Light')]}> Estimated time </Text>\n\n                                    <CustomInput\n                                        maxSize={50}\n                                        value={timeEstimated.hours}\n                                        setValue={value => {\n                                            setTimeEstimated({\n                                                ...timeEstimated,\n                                                hours: +value.name ? +value.name : value.name === '' ? 0 : timeEstimated.hours,\n                                            });\n                                        }}\n                                    ></CustomInput>\n                                    <Text style={[headers.H4('black', 'Light')]}> h </Text>\n                                    <CustomInput\n                                        maxSize={50}\n                                        value={timeEstimated.min}\n                                        setValue={value => {\n                                            // console.log(value);\n                                            setTimeEstimated({\n                                                ...timeEstimated,\n                                                min: +value.name ? +value.name : value.name === '' ? 0 : timeEstimated.min,\n                                            });\n                                        }}\n                                    ></CustomInput>\n                                    <Text style={[headers.H4('black', 'Light')]}> min </Text>\n                                </View>\n                            )}\n                        </View>\n                    )}\n                </View>\n\n                <View style={{ flexDirection: 'row', justifyContent: 'flex-end', padding: 20, marginRight: 20, marginTop: 10 }}>\n                    <StandardButton\n                        disabled={(!finishedWorkout || (!timeEstimated.hours && !timeEstimated.min)) && !detailsModal.isCompleted}\n                        title={detailsModal.isCompleted ? 'Close' : 'Submit'}\n                        color={colors.themeActive()}\n                        style={{ borderRadius: 5, paddingLeft: 40, paddingRight: 40, paddingTop: 12, paddingBottom: 12 }}\n                        hasShadow={true}\n                        onPress={() => {\n                            if (!detailsModal.isCompleted) {\n                                // console.log(timeEstimated.hours, timeEstimated.min, timeEstimated.hours + timeEstimated.min / 60);\n                                let date = dateToIsoConverter(new Date(detailsModal.dateTrained));\n                                // console.log(date);\n                                dispatch(updateWorkout(detailsModal.dailyWorkoutId, date, timeEstimated.hours + timeEstimated.min / 60, true));\n                            }\n                            setDetailsModal(false);\n                        }}\n                    ></StandardButton>\n                    {/* <StandardButton></StandardButton> */}\n\n                    {/* <ConfirmDialog open={open} handleClose={handleClose} handleConfirm={handleConfirm}></ConfirmDialog> */}\n                </View>\n            </View>\n            {textAndPictureModalInfo && (\n                <TextAndPictureModal\n                    setModalOpen={setOpenTextAndPictureModal}\n                    title={textAndPictureModalInfo.name}\n                    text={textAndPictureModalInfo.description}\n                    imageSource={textAndPictureModalInfo.imageUrl}\n                />\n            )}\n        </ImageBackground>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}