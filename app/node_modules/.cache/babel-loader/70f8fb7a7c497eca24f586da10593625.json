{"ast":null,"code":"import _objectSpread from \"/Users/petarpenkov/Documents/fitness-fe-master/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport axios from 'axios'; // require('dotenv').config();\n\nconst API_ENDPOINT = process.env.REACT_APP_FITNESS_API_ENDPOINT; // const API_ENDPOINT = 'http://132.148.128.106:3000';\n\nlet requestsLog = [];\n\nconst perform = (method, url, data, headers, auth) => {\n  const performFunc = () => {\n    return axios({\n      method: method,\n      url: url,\n      data: data,\n      headers: headers ? _objectSpread({}, headers, {\n        'Content-Type': headers['Content-Type'] || 'application/json'\n      }) : {}\n    });\n  };\n\n  return performFunc().then(res => {\n    requestsLog.push({\n      date: new Date().toUTCString(),\n      urlRequested: url,\n      requestType: method,\n      requestData: data,\n      wasSuccessful: true\n    });\n    return res;\n  }).catch(e => {\n    requestsLog.push({\n      date: new Date().toUTCString(),\n      urlRequested: url,\n      requestType: method,\n      requestData: data,\n      wasSuccessful: false,\n      error: e\n    });\n    throw e;\n  });\n};\n\nexport default {\n  get: (path, headers) => {\n    console.log('=====GET REQUEST FROM=======' + API_ENDPOINT + path);\n    return perform('GET', API_ENDPOINT + path, {}, headers || {}, {});\n  },\n  post: (path, data, headers, auth) => perform('POST', API_ENDPOINT + path, data, headers || {}, auth || {}),\n  getLog: () => requestsLog,\n  // Not auth implemented\n  useUrl: url => {\n    return {\n      get: () => perform('GET', url),\n      post: (data, additional) => perform('POST', url, data, additional.headers)\n    };\n  }\n};","map":{"version":3,"sources":["/Users/petarpenkov/Documents/fitness-fe-master/app/src/services/requestAgent.js"],"names":["axios","API_ENDPOINT","process","env","REACT_APP_FITNESS_API_ENDPOINT","requestsLog","perform","method","url","data","headers","auth","performFunc","then","res","push","date","Date","toUTCString","urlRequested","requestType","requestData","wasSuccessful","catch","e","error","get","path","console","log","post","getLog","useUrl","additional"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,8BAAjC,C,CACA;;AAEA,IAAIC,WAAW,GAAG,EAAlB;;AAEA,MAAMC,OAAO,GAAG,CAACC,MAAD,EAASC,GAAT,EAAcC,IAAd,EAAoBC,OAApB,EAA6BC,IAA7B,KAAsC;AAClD,QAAMC,WAAW,GAAG,MAAM;AACtB,WAAOZ,KAAK,CAAC;AACTO,MAAAA,MAAM,EAAEA,MADC;AAETC,MAAAA,GAAG,EAAEA,GAFI;AAGTC,MAAAA,IAAI,EAAEA,IAHG;AAITC,MAAAA,OAAO,EAAEA,OAAO,qBAEHA,OAFG;AAGN,wBAAgBA,OAAO,CAAC,cAAD,CAAP,IAA2B;AAHrC,WAKV;AATG,KAAD,CAAZ;AAWH,GAZD;;AAcA,SAAOE,WAAW,GACbC,IADE,CACGC,GAAG,IAAI;AACTT,IAAAA,WAAW,CAACU,IAAZ,CAAiB;AACbC,MAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EADO;AAEbC,MAAAA,YAAY,EAAEX,GAFD;AAGbY,MAAAA,WAAW,EAAEb,MAHA;AAIbc,MAAAA,WAAW,EAAEZ,IAJA;AAKba,MAAAA,aAAa,EAAE;AALF,KAAjB;AAOA,WAAOR,GAAP;AACH,GAVE,EAWFS,KAXE,CAWIC,CAAC,IAAI;AACRnB,IAAAA,WAAW,CAACU,IAAZ,CAAiB;AACbC,MAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EADO;AAEbC,MAAAA,YAAY,EAAEX,GAFD;AAGbY,MAAAA,WAAW,EAAEb,MAHA;AAIbc,MAAAA,WAAW,EAAEZ,IAJA;AAKba,MAAAA,aAAa,EAAE,KALF;AAMbG,MAAAA,KAAK,EAAED;AANM,KAAjB;AAQA,UAAMA,CAAN;AACH,GArBE,CAAP;AAsBH,CArCD;;AAuCA,eAAe;AACXE,EAAAA,GAAG,EAAE,CAACC,IAAD,EAAOjB,OAAP,KAAmB;AACpBkB,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiC5B,YAAjC,GAAgD0B,IAA5D;AACA,WAAOrB,OAAO,CAAC,KAAD,EAAQL,YAAY,GAAG0B,IAAvB,EAA6B,EAA7B,EAAiCjB,OAAO,IAAI,EAA5C,EAAgD,EAAhD,CAAd;AACH,GAJU;AAKXoB,EAAAA,IAAI,EAAE,CAACH,IAAD,EAAOlB,IAAP,EAAaC,OAAb,EAAsBC,IAAtB,KAA+BL,OAAO,CAAC,MAAD,EAASL,YAAY,GAAG0B,IAAxB,EAA8BlB,IAA9B,EAAoCC,OAAO,IAAI,EAA/C,EAAmDC,IAAI,IAAI,EAA3D,CALjC;AAMXoB,EAAAA,MAAM,EAAE,MAAM1B,WANH;AAOX;AACA2B,EAAAA,MAAM,EAAExB,GAAG,IAAI;AACX,WAAO;AACHkB,MAAAA,GAAG,EAAE,MAAMpB,OAAO,CAAC,KAAD,EAAQE,GAAR,CADf;AAEHsB,MAAAA,IAAI,EAAE,CAACrB,IAAD,EAAOwB,UAAP,KAAsB3B,OAAO,CAAC,MAAD,EAASE,GAAT,EAAcC,IAAd,EAAoBwB,UAAU,CAACvB,OAA/B;AAFhC,KAAP;AAIH;AAbU,CAAf","sourcesContent":["import axios from 'axios';\n// require('dotenv').config();\n\nconst API_ENDPOINT = process.env.REACT_APP_FITNESS_API_ENDPOINT;\n// const API_ENDPOINT = 'http://132.148.128.106:3000';\n\nlet requestsLog = [];\n\nconst perform = (method, url, data, headers, auth) => {\n    const performFunc = () => {\n        return axios({\n            method: method,\n            url: url,\n            data: data,\n            headers: headers\n                ? {\n                      ...headers,\n                      'Content-Type': headers['Content-Type'] || 'application/json',\n                  }\n                : {},\n        });\n    };\n\n    return performFunc()\n        .then(res => {\n            requestsLog.push({\n                date: new Date().toUTCString(),\n                urlRequested: url,\n                requestType: method,\n                requestData: data,\n                wasSuccessful: true,\n            });\n            return res;\n        })\n        .catch(e => {\n            requestsLog.push({\n                date: new Date().toUTCString(),\n                urlRequested: url,\n                requestType: method,\n                requestData: data,\n                wasSuccessful: false,\n                error: e,\n            });\n            throw e;\n        });\n};\n\nexport default {\n    get: (path, headers) => {\n        console.log('=====GET REQUEST FROM=======' + API_ENDPOINT + path);\n        return perform('GET', API_ENDPOINT + path, {}, headers || {}, {});\n    },\n    post: (path, data, headers, auth) => perform('POST', API_ENDPOINT + path, data, headers || {}, auth || {}),\n    getLog: () => requestsLog,\n    // Not auth implemented\n    useUrl: url => {\n        return {\n            get: () => perform('GET', url),\n            post: (data, additional) => perform('POST', url, data, additional.headers),\n        };\n    },\n};\n"]},"metadata":{},"sourceType":"module"}