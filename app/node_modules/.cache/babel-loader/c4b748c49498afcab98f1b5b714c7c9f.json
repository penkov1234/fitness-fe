{"ast":null,"code":"import _slicedToArray from \"/Users/petarpenkov/Documents/fitness-fe-master/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/petarpenkov/Documents/fitness-fe-master/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/petarpenkov/Documents/fitness-fe-master/app/src/module/components/CustomInput.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { fade, ThemeProvider, withStyles, makeStyles, createMuiTheme } from '@material-ui/core/styles';\nimport InputBase from '@material-ui/core/InputBase';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport { green } from '@material-ui/core/colors';\nimport { headers, colors } from 'styles';\nimport { View, Text, ScrollView } from 'react-native';\nimport { TouchableOpacity, Image } from 'react-native';\nimport searchPNG from 'assets/icons-for-web/search-512.png';\nimport TextAndPicture from 'module/components/TextAndPicture';\nconst BootstrapInput = withStyles(theme => ({\n  root: {\n    'label + &': {\n      marginTop: theme.spacing(3),\n      flexBasis: '100%'\n    }\n  },\n  input: _objectSpread({\n    borderRadius: 5,\n    position: 'relative',\n    backgroundColor: theme.palette.common.white,\n    border: `1px solid ${colors.borderGrayColor()}`,\n    // fontSize: 14,\n    width: '100%',\n    height: 'auto',\n    padding: '8px 8px',\n    transition: theme.transitions.create(['border-color', 'box-shadow'])\n  }, headers.H5(colors.primaryText(), 'Medium'), {\n    '&:focus': {\n      borderRadius: 5,\n      // borderColor: '#80bdff',\n      borderWidth: 2 // boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n\n    }\n  })\n}))(InputBase);\nexport default function CustomInput({\n  value,\n  setValue,\n  hasOptions,\n  options,\n  hasSearch,\n  style,\n  maxSize,\n  hasTextAndPicture\n}) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        focused = _useState2[0],\n        setFocused = _useState2[1];\n\n  const _useState3 = useState(options),\n        _useState4 = _slicedToArray(_useState3, 2),\n        filteredOptions = _useState4[0],\n        setFilteredOptions = _useState4[1];\n\n  const _useState5 = useState(-1),\n        _useState6 = _slicedToArray(_useState5, 2),\n        currentScrolledIndex = _useState6[0],\n        setCurrentScrolledIndex = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        currentlyViewedOption = _useState8[0],\n        setCurrentlyViewedOption = _useState8[1];\n\n  const scrollRef = useRef(null);\n  const bootstrapInputRef = useRef(null);\n  const searchRef = useRef(null);\n  const STANDARD_INPUT_WIDTH = 220;\n  const STANDARD_INPUT_HEIGHT = 40;\n\n  const _useState9 = useState(value),\n        _useState10 = _slicedToArray(_useState9, 2),\n        localValue = _useState10[0],\n        setLocalValue = _useState10[1];\n\n  const _useState11 = useState([{\n    name: 'option 1'\n  }, {\n    name: 'option 2'\n  }]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        data = _useState12[0],\n        setData = _useState12[1];\n\n  useEffect(() => {\n    if (hasOptions && scrollRef.current && currentScrolledIndex >= 0 && filteredOptions) {\n      setLocalValue(filteredOptions[currentScrolledIndex].name);\n      scrollRef.current.scrollTo({\n        x: 0,\n        y: currentScrolledIndex * STANDARD_INPUT_HEIGHT,\n        animated: false\n      });\n      filteredOptions.forEach((el, index) => {\n        el.hovered = false; // console.log(index, currentScrolledIndex);\n\n        if (index === currentScrolledIndex) {\n          el.hovered = true;\n        }\n      });\n      setCurrentlyViewedOption(filteredOptions[currentScrolledIndex]);\n      setFilteredOptions(filteredOptions);\n    } else if (hasOptions && scrollRef.current && filteredOptions && currentScrolledIndex == -1) {\n      setLocalValue(''); // scrollRef.current.scrollTo({ x: 0, y: 0, animated: false });\n\n      resetFocusedFields();\n    }\n  }, [currentScrolledIndex]);\n  useEffect(() => {\n    if (!focused) {\n      setCurrentlyViewedOption(false);\n    }\n  }, [focused]);\n  useEffect(() => {\n    if (hasOptions) {\n      setLocalValue(value);\n    }\n  }, [value]);\n  useEffect(() => {\n    if (options) {\n      if (value === '') {\n        setFilteredOptions(options);\n      } else {\n        // console.log(options);\n        setFilteredOptions(options.filter(el => {\n          let flag = el.name.toLowerCase().trim().includes(localValue.toLowerCase().trim());\n\n          if (!flag && el.author) {\n            flag = el.author.toLowerCase().trim().includes(localValue.toLowerCase().trim());\n          }\n\n          return flag;\n        }));\n      }\n    }\n  }, [value, options]);\n\n  function handleChange(value) {\n    // console.log('value is ', value);\n    setCurrentScrolledIndex(-1);\n    setValue({\n      name: value,\n      id: null\n    });\n  }\n\n  function resetFocusedFields() {\n    if (filteredOptions) {\n      filteredOptions.forEach((el, index) => {\n        el.hovered = false;\n      });\n      setFilteredOptions(filteredOptions);\n    }\n  } // console.log(scrollRef);\n  // useEffect(() => {\n  //     if (scrollRef.current) {\n  //         scrollRef.current.scrollTo({ x: 0, y: 4 * 40, animated: false });\n  //     }\n  // });\n  // console.log(value, localValue, currentScrolledIndex, filteredOptions);\n\n\n  return React.createElement(FormControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(BootstrapInput, {\n    tabIndex: \"0\",\n    ref: bootstrapInputRef,\n    onKeyDown: event => {\n      if (hasOptions) {\n        if (event.keyCode == '38') {\n          // up arrow\n          if (currentScrolledIndex >= 0) {\n            setCurrentScrolledIndex(currentScrolledIndex - 1);\n          }\n        } else if (event.keyCode == '40') {\n          // down arrow\n          // if (currentScrolledIndex < filteredOptions.length) {\n          if (!focused) {\n            setFocused(true);\n          } else {\n            setCurrentScrolledIndex(currentScrolledIndex + 1 < filteredOptions.length - 1 ? currentScrolledIndex + 1 : filteredOptions.length - 1);\n          } // }\n\n        } else if (event.keyCode == '37') {// left arrow\n        } else if (event.keyCode == '39') {// right arrow\n        } else if (event.key === 'Enter') {\n          // enter\n          setFocused(false);\n          resetFocusedFields();\n\n          if (currentScrolledIndex >= 0 && filteredOptions[currentScrolledIndex]) {\n            setValue(filteredOptions[currentScrolledIndex]);\n          } // setCurrentScrolledIndex(-1);\n\n        }\n      }\n    },\n    style: {\n      flexBasis: '60%',\n      maxWidth: maxSize ? maxSize : STANDARD_INPUT_WIDTH,\n      minWidth: 0\n    },\n    onBlur: event => {\n      // console.log('focus out');\n      setCurrentScrolledIndex(-1);\n      setFocused(false);\n      resetFocusedFields();\n    },\n    onFocus: event => {\n      // console.log(event);\n      setFocused(true);\n      setCurrentScrolledIndex(-1);\n    },\n    value: hasOptions ? localValue : value,\n    onChange: event => handleChange(event.target.value) // id=\"bootstrap-input\"\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), hasOptions && focused && React.createElement(View, {\n    style: {\n      position: 'absolute',\n      top: 36,\n      left: 5,\n      zIndex: 9999,\n      borderTopColor: colors.borderGrayColor(40),\n      borderTopWidth: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(ScrollView, {\n    ref: scrollRef,\n    style: {\n      maxHeight: 200,\n      boxShadow: '-3px 2px 6px -1px' + ' rgba(0,0,0,0.4)'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, filteredOptions && filteredOptions.map(el => {\n    return React.createElement(TouchableOpacity, {\n      key: el.id,\n      onMouseEnter: () => {\n        el.hovered = true;\n        setFilteredOptions([...filteredOptions]);\n        setCurrentlyViewedOption(el);\n      },\n      onMouseLeave: () => {\n        el.hovered = false;\n        setFilteredOptions([...filteredOptions]); // setCurrentlyViewedOption(false);\n      },\n      style: {\n        width: maxSize ? maxSize : STANDARD_INPUT_WIDTH,\n        height: STANDARD_INPUT_HEIGHT,\n        backgroundColor: el.hovered ? colors.borderGrayColor(90) : colors.optionsColor(),\n        boxShadow: '-3px 2px 6px -1px' + ' rgba(0,0,0,0.4)',\n        justifyContent: 'center'\n      },\n      onPress: () => {\n        setValue(el);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(Text, {\n      style: [headers.H6('black', 'Light'), {\n        paddingLeft: 20\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, el.name, React.createElement(Text, {\n      style: [headers.H6('black', 'Medium')],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, el.author ? ` by ${el.author}` : '', \" \")));\n  })), hasSearch && React.createElement(View, {\n    ref: searchRef,\n    style: {\n      width: maxSize ? maxSize : STANDARD_INPUT_WIDTH,\n      // height: 40,\n      minHeight: STANDARD_INPUT_HEIGHT,\n      backgroundColor: 'white',\n      boxShadow: '-3px 2px 6px -1px' + ' rgba(0,0,0,0.4)',\n      // justifyContent: 'center',\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, React.createElement(Image, {\n    source: searchPNG,\n    style: {\n      width: 25,\n      height: 25,\n      margin: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }), React.createElement(Text, {\n    style: [headers.H5(null, 'Medium'), {\n      wordBreak: 'break-word',\n      margin: 10\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, \"Search: \", React.createElement(Text, {\n    style: [headers.H5('black', 'Light')],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, localValue)))), hasOptions && hasTextAndPicture && currentlyViewedOption && React.createElement(View, {\n    style: {\n      position: 'absolute',\n      top: -150,\n      left: maxSize ? maxSize + 20 : STANDARD_INPUT_WIDTH + 20,\n      zIndex: 9999\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, React.createElement(TextAndPicture, {\n    style: {\n      width: 300,\n      height: 400,\n      backgroundColor: '#fafafa'\n    },\n    title: currentlyViewedOption.name,\n    text: currentlyViewedOption ? currentlyViewedOption.description : '',\n    imageSource: currentlyViewedOption ? currentlyViewedOption.imageUrl : '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/petarpenkov/Documents/fitness-fe-master/app/src/module/components/CustomInput.js"],"names":["React","useState","useEffect","useRef","fade","ThemeProvider","withStyles","makeStyles","createMuiTheme","InputBase","InputLabel","TextField","FormControl","green","headers","colors","View","Text","ScrollView","TouchableOpacity","Image","searchPNG","TextAndPicture","BootstrapInput","theme","root","marginTop","spacing","flexBasis","input","borderRadius","position","backgroundColor","palette","common","white","border","borderGrayColor","width","height","padding","transition","transitions","create","H5","primaryText","borderWidth","CustomInput","value","setValue","hasOptions","options","hasSearch","style","maxSize","hasTextAndPicture","focused","setFocused","filteredOptions","setFilteredOptions","currentScrolledIndex","setCurrentScrolledIndex","currentlyViewedOption","setCurrentlyViewedOption","scrollRef","bootstrapInputRef","searchRef","STANDARD_INPUT_WIDTH","STANDARD_INPUT_HEIGHT","localValue","setLocalValue","name","data","setData","current","scrollTo","x","y","animated","forEach","el","index","hovered","resetFocusedFields","filter","flag","toLowerCase","trim","includes","author","handleChange","id","event","keyCode","length","key","maxWidth","minWidth","target","top","left","zIndex","borderTopColor","borderTopWidth","maxHeight","boxShadow","map","optionsColor","justifyContent","H6","paddingLeft","minHeight","flexDirection","alignItems","margin","wordBreak","description","imageUrl"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { fade, ThemeProvider, withStyles, makeStyles, createMuiTheme } from '@material-ui/core/styles';\nimport InputBase from '@material-ui/core/InputBase';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport { green } from '@material-ui/core/colors';\nimport { headers, colors } from 'styles';\nimport { View, Text, ScrollView } from 'react-native';\nimport { TouchableOpacity, Image } from 'react-native';\nimport searchPNG from 'assets/icons-for-web/search-512.png';\nimport TextAndPicture from 'module/components/TextAndPicture';\n\nconst BootstrapInput = withStyles(theme => ({\n    root: {\n        'label + &': {\n            marginTop: theme.spacing(3),\n            flexBasis: '100%',\n        },\n    },\n    input: {\n        borderRadius: 5,\n        position: 'relative',\n        backgroundColor: theme.palette.common.white,\n        border: `1px solid ${colors.borderGrayColor()}`,\n        // fontSize: 14,\n        width: '100%',\n        height: 'auto',\n        padding: '8px 8px',\n        transition: theme.transitions.create(['border-color', 'box-shadow']),\n        // Use the system font instead of the default Roboto font.\n        ...headers.H5(colors.primaryText(), 'Medium'),\n        '&:focus': {\n            borderRadius: 5,\n            // borderColor: '#80bdff',\n            borderWidth: 2,\n            // boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n        },\n    },\n}))(InputBase);\n\nexport default function CustomInput({ value, setValue, hasOptions, options, hasSearch, style, maxSize, hasTextAndPicture }) {\n    const [focused, setFocused] = useState(false);\n    const [filteredOptions, setFilteredOptions] = useState(options);\n    const [currentScrolledIndex, setCurrentScrolledIndex] = useState(-1);\n    const [currentlyViewedOption, setCurrentlyViewedOption] = useState(false);\n\n    const scrollRef = useRef(null);\n    const bootstrapInputRef = useRef(null);\n    const searchRef = useRef(null);\n    const STANDARD_INPUT_WIDTH = 220;\n    const STANDARD_INPUT_HEIGHT = 40;\n\n    const [localValue, setLocalValue] = useState(value);\n\n    const [data, setData] = useState([\n        {\n            name: 'option 1',\n        },\n        { name: 'option 2' },\n    ]);\n\n    useEffect(() => {\n        if (hasOptions && scrollRef.current && currentScrolledIndex >= 0 && filteredOptions) {\n            setLocalValue(filteredOptions[currentScrolledIndex].name);\n            scrollRef.current.scrollTo({ x: 0, y: currentScrolledIndex * STANDARD_INPUT_HEIGHT, animated: false });\n            filteredOptions.forEach((el, index) => {\n                el.hovered = false;\n                // console.log(index, currentScrolledIndex);\n                if (index === currentScrolledIndex) {\n                    el.hovered = true;\n                }\n            });\n            setCurrentlyViewedOption(filteredOptions[currentScrolledIndex]);\n            setFilteredOptions(filteredOptions);\n        } else if (hasOptions && scrollRef.current && filteredOptions && currentScrolledIndex == -1) {\n            setLocalValue('');\n            // scrollRef.current.scrollTo({ x: 0, y: 0, animated: false });\n            resetFocusedFields();\n        }\n    }, [currentScrolledIndex]);\n\n    useEffect(() => {\n        if (!focused) {\n            setCurrentlyViewedOption(false);\n        }\n    }, [focused]);\n\n    useEffect(() => {\n        if (hasOptions) {\n            setLocalValue(value);\n        }\n    }, [value]);\n    useEffect(() => {\n        if (options) {\n            if (value === '') {\n                setFilteredOptions(options);\n            } else {\n                // console.log(options);\n                setFilteredOptions(\n                    options.filter(el => {\n                        let flag = el.name\n                            .toLowerCase()\n                            .trim()\n                            .includes(localValue.toLowerCase().trim());\n                        if (!flag && el.author) {\n                            flag = el.author\n                                .toLowerCase()\n                                .trim()\n                                .includes(localValue.toLowerCase().trim());\n                        }\n                        return flag;\n                    })\n                );\n            }\n        }\n    }, [value, options]);\n\n    function handleChange(value) {\n        // console.log('value is ', value);\n        setCurrentScrolledIndex(-1);\n\n        setValue({ name: value, id: null });\n    }\n\n    function resetFocusedFields() {\n        if (filteredOptions) {\n            filteredOptions.forEach((el, index) => {\n                el.hovered = false;\n            });\n            setFilteredOptions(filteredOptions);\n        }\n    }\n\n    // console.log(scrollRef);\n\n    // useEffect(() => {\n    //     if (scrollRef.current) {\n    //         scrollRef.current.scrollTo({ x: 0, y: 4 * 40, animated: false });\n    //     }\n    // });\n\n    // console.log(value, localValue, currentScrolledIndex, filteredOptions);\n\n    return (\n        <FormControl>\n            <BootstrapInput\n                tabIndex=\"0\"\n                ref={bootstrapInputRef}\n                onKeyDown={event => {\n                    if (hasOptions) {\n                        if (event.keyCode == '38') {\n                            // up arrow\n                            if (currentScrolledIndex >= 0) {\n                                setCurrentScrolledIndex(currentScrolledIndex - 1);\n                            }\n                        } else if (event.keyCode == '40') {\n                            // down arrow\n                            // if (currentScrolledIndex < filteredOptions.length) {\n                            if (!focused) {\n                                setFocused(true);\n                            } else {\n                                setCurrentScrolledIndex(\n                                    currentScrolledIndex + 1 < filteredOptions.length - 1 ? currentScrolledIndex + 1 : filteredOptions.length - 1\n                                );\n                            }\n                            // }\n                        } else if (event.keyCode == '37') {\n                            // left arrow\n                        } else if (event.keyCode == '39') {\n                            // right arrow\n                        } else if (event.key === 'Enter') {\n                            // enter\n                            setFocused(false);\n                            resetFocusedFields();\n                            if (currentScrolledIndex >= 0 && filteredOptions[currentScrolledIndex]) {\n                                setValue(filteredOptions[currentScrolledIndex]);\n                            }\n                            // setCurrentScrolledIndex(-1);\n                        }\n                    }\n                }}\n                style={{\n                    flexBasis: '60%',\n                    maxWidth: maxSize ? maxSize : STANDARD_INPUT_WIDTH,\n                    minWidth: 0,\n                }}\n                onBlur={event => {\n                    // console.log('focus out');\n                    setCurrentScrolledIndex(-1);\n                    setFocused(false);\n                    resetFocusedFields();\n                }}\n                onFocus={event => {\n                    // console.log(event);\n\n                    setFocused(true);\n                    setCurrentScrolledIndex(-1);\n                }}\n                value={hasOptions ? localValue : value}\n                onChange={event => handleChange(event.target.value)}\n                // id=\"bootstrap-input\"\n            />\n            {hasOptions && focused && (\n                <View style={{ position: 'absolute', top: 36, left: 5, zIndex: 9999, borderTopColor: colors.borderGrayColor(40), borderTopWidth: 1 }}>\n                    <ScrollView ref={scrollRef} style={{ maxHeight: 200, boxShadow: '-3px 2px 6px -1px' + ' rgba(0,0,0,0.4)' }}>\n                        {filteredOptions &&\n                            filteredOptions.map(el => {\n                                return (\n                                    <TouchableOpacity\n                                        key={el.id}\n                                        onMouseEnter={() => {\n                                            el.hovered = true;\n                                            setFilteredOptions([...filteredOptions]);\n                                            setCurrentlyViewedOption(el);\n                                        }}\n                                        onMouseLeave={() => {\n                                            el.hovered = false;\n                                            setFilteredOptions([...filteredOptions]);\n                                            // setCurrentlyViewedOption(false);\n                                        }}\n                                        style={{\n                                            width: maxSize ? maxSize : STANDARD_INPUT_WIDTH,\n                                            height: STANDARD_INPUT_HEIGHT,\n                                            backgroundColor: el.hovered ? colors.borderGrayColor(90) : colors.optionsColor(),\n                                            boxShadow: '-3px 2px 6px -1px' + ' rgba(0,0,0,0.4)',\n                                            justifyContent: 'center',\n                                        }}\n                                        onPress={() => {\n                                            setValue(el);\n                                        }}\n                                    >\n                                        <Text style={[headers.H6('black', 'Light'), { paddingLeft: 20 }]}>\n                                            {el.name}\n                                            <Text style={[headers.H6('black', 'Medium')]}>{el.author ? ` by ${el.author}` : ''} </Text>\n                                        </Text>\n                                    </TouchableOpacity>\n                                );\n                            })}\n                    </ScrollView>\n                    {hasSearch && (\n                        <View\n                            ref={searchRef}\n                            style={{\n                                width: maxSize ? maxSize : STANDARD_INPUT_WIDTH,\n                                // height: 40,\n\n                                minHeight: STANDARD_INPUT_HEIGHT,\n                                backgroundColor: 'white',\n                                boxShadow: '-3px 2px 6px -1px' + ' rgba(0,0,0,0.4)',\n                                // justifyContent: 'center',\n                                flexDirection: 'row',\n                                alignItems: 'center',\n                            }}\n                        >\n                            <Image source={searchPNG} style={{ width: 25, height: 25, margin: 10 }} />\n\n                            <Text style={[headers.H5(null, 'Medium'), { wordBreak: 'break-word', margin: 10 }]}>\n                                Search: <Text style={[headers.H5('black', 'Light')]}>{localValue}</Text>\n                            </Text>\n                        </View>\n                    )}\n                </View>\n            )}\n            {hasOptions && hasTextAndPicture && currentlyViewedOption && (\n                <View style={{ position: 'absolute', top: -150, left: maxSize ? maxSize + 20 : STANDARD_INPUT_WIDTH + 20, zIndex: 9999 }}>\n                    <TextAndPicture\n                        style={{ width: 300, height: 400, backgroundColor: '#fafafa' }}\n                        title={currentlyViewedOption.name}\n                        text={currentlyViewedOption ? currentlyViewedOption.description : ''}\n                        imageSource={currentlyViewedOption ? currentlyViewedOption.imageUrl : ''}\n                    />\n                </View>\n            )}\n        </FormControl>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}