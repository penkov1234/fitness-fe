{"ast":null,"code":"import _objectSpread from \"/Users/petarpenkov/Documents/fitness-fe-master/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { LOGIN, STORAGE_PERSIST } from 'redux/constants/auth.constants';\nimport { ActionStatus } from 'redux/core/ActionStatus';\nimport { persistor } from 'redux/config/store';\nimport { loginApiRequest, refreshTokenRequest } from 'services/apiRequests/login';\nimport { buildActionType } from 'redux/actions/buildActionType';\nimport { REGISTER, REGISTER_PROGRESS, FIRST_STEP_DATA, SECOND_STEP_DATA } from '../constants/register.constants';\nimport { useSelector } from 'react-redux';\nimport requestAgent from '../../services/requestAgent';\nimport { REGISTER_API } from '../../services/api';\nimport { LOGOUT } from '../constants/auth.constants';\nimport { PostRequestWithData } from '../../services/apiRequests';\n\nconst passwordLoginAction = (email, password) => async dispatch => {\n  dispatch({\n    type: buildActionType(LOGIN, ActionStatus.START)\n  });\n  const response = await loginApiRequest(email, password);\n\n  if (response.success) {\n    dispatch({\n      type: buildActionType(LOGIN, ActionStatus.DONE),\n      payload: _objectSpread({}, response, {\n        auth: 'Basic ' + btoa(email + ':' + password)\n      })\n    }); // dispatch({ type: NOTIFICATION, payload: { message: `${SuccessNotification[LOGIN.action]} logged in`, variant: NotificationType.Success } });\n\n    await persistor.flush();\n    dispatch({\n      type: buildActionType(STORAGE_PERSIST, ActionStatus.DONE)\n    });\n  } else {\n    dispatch({\n      type: buildActionType(LOGIN, ActionStatus.FAILED)\n    });\n  }\n};\n\nconst refreshProviderToken = async dispatch => {\n  let tokenPromise = refreshTokenRequest().then(response => {\n    console.log(response);\n    response.data.token_creation = Date.now();\n    dispatch({\n      type: buildActionType(LOGIN, ActionStatus.DONE),\n      payload: _objectSpread({}, response, {\n        fetchingToken: false\n      })\n    });\n    persistor.flush();\n    dispatch({\n      type: buildActionType(STORAGE_PERSIST, ActionStatus.DONE)\n    });\n    return Promise.resolve();\n  });\n  console.log(tokenPromise);\n  dispatch({\n    type: buildActionType(LOGIN, ActionStatus.REFRESH),\n    payload: {\n      fetchingToken: tokenPromise\n    }\n  });\n  return tokenPromise; // try {\n  //     const response = await refreshTokenRequest();\n  //     if (response.success) {\n  //         response.data.token_creation = Date.now();\n  //         dispatch({ type: buildActionType(LOGIN, ActionStatus.DONE), payload: { ...response, fetchingToken: false } });\n  //         await persistor.flush();\n  //         dispatch({ type: buildActionType(STORAGE_PERSIST, ActionStatus.DONE) });\n  //         return Promise.resolve(response.data.data.refresh_token);\n  //     }\n  // } catch (error) {\n  //     return Promise.reject();\n  // }\n};\n\nconst registerStartedAction = () => async dispatch => {\n  dispatch({\n    type: buildActionType(REGISTER, ActionStatus.START)\n  });\n  dispatch({\n    type: buildActionType(REGISTER_PROGRESS, ActionStatus.DONE),\n    payload: {\n      progress: 1\n    }\n  });\n};\n\nconst registerNextStepAction = data => async dispatch => {\n  dispatch({\n    type: buildActionType(REGISTER_PROGRESS, ActionStatus.DONE),\n    payload: {\n      progress: 2\n    }\n  });\n  dispatch({\n    type: buildActionType(FIRST_STEP_DATA, ActionStatus.DONE),\n    payload: {\n      data: data\n    }\n  });\n};\n\nconst previousStepAction = () => async dispatch => {\n  console.log('dispatch here');\n  dispatch({\n    type: buildActionType(REGISTER_PROGRESS, ActionStatus.DONE),\n    payload: {\n      progress: 1\n    }\n  });\n};\n\nconst registerUserAction = (firstStepData, name, lastName, weight, height, bodyFat) => async dispatch => {\n  let user = {};\n  user.email = firstStepData.username;\n  user.password = firstStepData.password;\n  user.name = name;\n  user.lastName = lastName;\n  user.weight = weight;\n  user.height = height;\n  user.bodyFat = bodyFat;\n  const response = await requestAgent.post(REGISTER_API, user, {\n    'Content-Type': 'application/json'\n  });\n\n  if (response.status === 200) {\n    dispatch({\n      type: buildActionType(REGISTER, ActionStatus.DONE)\n    });\n  } else {\n    dispatch({\n      type: buildActionType(REGISTER, ActionStatus.FAILED)\n    });\n  }\n};\n\nconst logoutAction = () => async dispatch => {\n  dispatch({\n    type: buildActionType(LOGOUT, ActionStatus.DONE)\n  });\n}; // const logoutAction = () => async dispatch => dispatch({ type: LOGOUT });\n\n\nexport { passwordLoginAction, refreshProviderToken, registerStartedAction, registerNextStepAction, previousStepAction, registerUserAction, logoutAction };","map":{"version":3,"sources":["/Users/petarpenkov/Documents/fitness-fe-master/app/src/redux/actions/auth.actions.js"],"names":["LOGIN","STORAGE_PERSIST","ActionStatus","persistor","loginApiRequest","refreshTokenRequest","buildActionType","REGISTER","REGISTER_PROGRESS","FIRST_STEP_DATA","SECOND_STEP_DATA","useSelector","requestAgent","REGISTER_API","LOGOUT","PostRequestWithData","passwordLoginAction","email","password","dispatch","type","START","response","success","DONE","payload","auth","btoa","flush","FAILED","refreshProviderToken","tokenPromise","then","console","log","data","token_creation","Date","now","fetchingToken","Promise","resolve","REFRESH","registerStartedAction","progress","registerNextStepAction","previousStepAction","registerUserAction","firstStepData","name","lastName","weight","height","bodyFat","user","username","post","status","logoutAction"],"mappings":"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","sourcesContent":["import { LOGIN, STORAGE_PERSIST } from 'redux/constants/auth.constants';\nimport { ActionStatus } from 'redux/core/ActionStatus';\nimport { persistor } from 'redux/config/store';\nimport { loginApiRequest, refreshTokenRequest } from 'services/apiRequests/login';\nimport { buildActionType } from 'redux/actions/buildActionType';\nimport { REGISTER, REGISTER_PROGRESS, FIRST_STEP_DATA, SECOND_STEP_DATA } from '../constants/register.constants';\nimport { useSelector } from 'react-redux';\nimport requestAgent from '../../services/requestAgent';\nimport { REGISTER_API } from '../../services/api';\nimport { LOGOUT } from '../constants/auth.constants';\nimport { PostRequestWithData } from '../../services/apiRequests';\n\nconst passwordLoginAction = (email, password) => async dispatch => {\n    dispatch({ type: buildActionType(LOGIN, ActionStatus.START) });\n    const response = await loginApiRequest(email, password);\n\n    if (response.success) {\n        dispatch({\n            type: buildActionType(LOGIN, ActionStatus.DONE),\n            payload: {\n                ...response,\n                auth: 'Basic ' + btoa(email + ':' + password),\n            },\n        });\n        // dispatch({ type: NOTIFICATION, payload: { message: `${SuccessNotification[LOGIN.action]} logged in`, variant: NotificationType.Success } });\n        await persistor.flush();\n        dispatch({ type: buildActionType(STORAGE_PERSIST, ActionStatus.DONE) });\n    } else {\n        dispatch({\n            type: buildActionType(LOGIN, ActionStatus.FAILED),\n        });\n    }\n};\n\nconst refreshProviderToken = async dispatch => {\n    let tokenPromise = refreshTokenRequest().then(response => {\n        console.log(response);\n        response.data.token_creation = Date.now();\n        dispatch({ type: buildActionType(LOGIN, ActionStatus.DONE), payload: { ...response, fetchingToken: false } });\n        persistor.flush();\n        dispatch({ type: buildActionType(STORAGE_PERSIST, ActionStatus.DONE) });\n        return Promise.resolve();\n    });\n    console.log(tokenPromise);\n\n    dispatch({\n        type: buildActionType(LOGIN, ActionStatus.REFRESH),\n        payload: {\n            fetchingToken: tokenPromise,\n        },\n    });\n    return tokenPromise;\n    // try {\n    //     const response = await refreshTokenRequest();\n    //     if (response.success) {\n    //         response.data.token_creation = Date.now();\n    //         dispatch({ type: buildActionType(LOGIN, ActionStatus.DONE), payload: { ...response, fetchingToken: false } });\n    //         await persistor.flush();\n    //         dispatch({ type: buildActionType(STORAGE_PERSIST, ActionStatus.DONE) });\n    //         return Promise.resolve(response.data.data.refresh_token);\n    //     }\n    // } catch (error) {\n    //     return Promise.reject();\n    // }\n};\n\nconst registerStartedAction = () => async dispatch => {\n    dispatch({ type: buildActionType(REGISTER, ActionStatus.START) });\n    dispatch({\n        type: buildActionType(REGISTER_PROGRESS, ActionStatus.DONE),\n        payload: {\n            progress: 1,\n        },\n    });\n};\n\nconst registerNextStepAction = data => async dispatch => {\n    dispatch({\n        type: buildActionType(REGISTER_PROGRESS, ActionStatus.DONE),\n        payload: {\n            progress: 2,\n        },\n    });\n    dispatch({\n        type: buildActionType(FIRST_STEP_DATA, ActionStatus.DONE),\n        payload: {\n            data: data,\n        },\n    });\n};\nconst previousStepAction = () => async dispatch => {\n    console.log('dispatch here');\n    dispatch({\n        type: buildActionType(REGISTER_PROGRESS, ActionStatus.DONE),\n        payload: {\n            progress: 1,\n        },\n    });\n};\n\nconst registerUserAction = (firstStepData, name, lastName, weight, height, bodyFat) => async dispatch => {\n    let user = {};\n    user.email = firstStepData.username;\n    user.password = firstStepData.password;\n    user.name = name;\n    user.lastName = lastName;\n    user.weight = weight;\n    user.height = height;\n    user.bodyFat = bodyFat;\n    const response = await requestAgent.post(REGISTER_API, user, { 'Content-Type': 'application/json' });\n\n    if (response.status === 200) {\n        dispatch({\n            type: buildActionType(REGISTER, ActionStatus.DONE),\n        });\n    } else {\n        dispatch({\n            type: buildActionType(REGISTER, ActionStatus.FAILED),\n        });\n    }\n};\nconst logoutAction = () => async dispatch => {\n    dispatch({ type: buildActionType(LOGOUT, ActionStatus.DONE) });\n};\n// const logoutAction = () => async dispatch => dispatch({ type: LOGOUT });\n\nexport {\n    passwordLoginAction,\n    refreshProviderToken,\n    registerStartedAction,\n    registerNextStepAction,\n    previousStepAction,\n    registerUserAction,\n    logoutAction,\n};\n"]},"metadata":{},"sourceType":"module"}