{"ast":null,"code":"export const truncateString = (text, length, clamp) => {\n  let txt = text || '';\n  let cl = clamp || '...';\n  let l = length || 100;\n  let t = txt.length > l ? txt.substring(0, l) + cl : txt;\n  return t;\n};\nexport const fixBrokenHtml = string => {\n  return new DOMParser().parseFromString(string, 'text/html').body.innerHTML;\n};\nexport const searchInWord = (keyword, word) => {\n  return word.search(new RegExp(keyword, 'i')) !== -1;\n};\nexport const constructQueryString = queryItems => {\n  return queryItems.filter(item => item.value).map(item => `${item.name}=${item.value}`).join('&');\n}; // export const fixHtmlImageSource = html => {\n//     let element = document.createElement('div');\n//     element.innerHTML = html;\n//     let imgSrcUrls = element.getElementsByTagName('img');\n//     // console.log(imgSrcUrls);\n//     for (let i = 0; i < imgSrcUrls.length; i++) {\n//         let urlValue = imgSrcUrls[i].getAttribute('src');\n//         if (urlValue) {\n//             imgSrcUrls[i].setAttribute('src', imageLink(urlValue));\n//         }\n//     }\n//     return element.outerHTML;\n// };\n\nexport const stringToArrayStructure = (str, delimiter = ',') => {\n  return str.split(delimiter).map(item => String(item).trim());\n};\nexport const validateEmail = email => {\n  var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\nexport function dateToIsoConverter(date) {\n  return date.getUTCFullYear() + '-' + ('00' + (date.getUTCMonth() + 1)).slice(-2) + '-' + ('00' + date.getDate()).slice(-2);\n}","map":{"version":3,"sources":["/Users/petarpenkov/Documents/fitness-fe-master/app/src/services/stringHelpers.js"],"names":["truncateString","text","length","clamp","txt","cl","l","t","substring","fixBrokenHtml","string","DOMParser","parseFromString","body","innerHTML","searchInWord","keyword","word","search","RegExp","constructQueryString","queryItems","filter","item","value","map","name","join","stringToArrayStructure","str","delimiter","split","String","trim","validateEmail","email","re","test","toLowerCase","dateToIsoConverter","date","getUTCFullYear","getUTCMonth","slice","getDate"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeC,KAAf,KAAyB;AACnD,MAAIC,GAAG,GAAGH,IAAI,IAAI,EAAlB;AACA,MAAII,EAAE,GAAGF,KAAK,IAAI,KAAlB;AACA,MAAIG,CAAC,GAAGJ,MAAM,IAAI,GAAlB;AACA,MAAIK,CAAC,GAAGH,GAAG,CAACF,MAAJ,GAAaI,CAAb,GAAiBF,GAAG,CAACI,SAAJ,CAAc,CAAd,EAAiBF,CAAjB,IAAsBD,EAAvC,GAA4CD,GAApD;AACA,SAAOG,CAAP;AACH,CANM;AAQP,OAAO,MAAME,aAAa,GAAGC,MAAM,IAAI;AACnC,SAAO,IAAIC,SAAJ,GAAgBC,eAAhB,CAAgCF,MAAhC,EAAwC,WAAxC,EAAqDG,IAArD,CAA0DC,SAAjE;AACH,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAG,CAACC,OAAD,EAAUC,IAAV,KAAmB;AAC3C,SAAOA,IAAI,CAACC,MAAL,CAAY,IAAIC,MAAJ,CAAWH,OAAX,EAAoB,GAApB,CAAZ,MAA0C,CAAC,CAAlD;AACH,CAFM;AAIP,OAAO,MAAMI,oBAAoB,GAAGC,UAAU,IAAI;AAC9C,SAAOA,UAAU,CACZC,MADE,CACKC,IAAI,IAAIA,IAAI,CAACC,KADlB,EAEFC,GAFE,CAEEF,IAAI,IAAK,GAAEA,IAAI,CAACG,IAAK,IAAGH,IAAI,CAACC,KAAM,EAFrC,EAGFG,IAHE,CAGG,GAHH,CAAP;AAIH,CALM,C,CAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,sBAAsB,GAAG,CAACC,GAAD,EAAMC,SAAS,GAAG,GAAlB,KAA0B;AAC5D,SAAOD,GAAG,CAACE,KAAJ,CAAUD,SAAV,EAAqBL,GAArB,CAAyBF,IAAI,IAAIS,MAAM,CAACT,IAAD,CAAN,CAAaU,IAAb,EAAjC,CAAP;AACH,CAFM;AAIP,OAAO,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAClC,MAAIC,EAAE,GAAG,yJAAT;AACA,SAAOA,EAAE,CAACC,IAAH,CAAQL,MAAM,CAACG,KAAD,CAAN,CAAcG,WAAd,EAAR,CAAP;AACH,CAHM;AAIP,OAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;AACrC,SAAOA,IAAI,CAACC,cAAL,KAAwB,GAAxB,GAA8B,CAAC,QAAQD,IAAI,CAACE,WAAL,KAAqB,CAA7B,CAAD,EAAkCC,KAAlC,CAAwC,CAAC,CAAzC,CAA9B,GAA4E,GAA5E,GAAkF,CAAC,OAAOH,IAAI,CAACI,OAAL,EAAR,EAAwBD,KAAxB,CAA8B,CAAC,CAA/B,CAAzF;AACH","sourcesContent":["export const truncateString = (text, length, clamp) => {\n    let txt = text || '';\n    let cl = clamp || '...';\n    let l = length || 100;\n    let t = txt.length > l ? txt.substring(0, l) + cl : txt;\n    return t;\n};\n\nexport const fixBrokenHtml = string => {\n    return new DOMParser().parseFromString(string, 'text/html').body.innerHTML;\n};\n\nexport const searchInWord = (keyword, word) => {\n    return word.search(new RegExp(keyword, 'i')) !== -1;\n};\n\nexport const constructQueryString = queryItems => {\n    return queryItems\n        .filter(item => item.value)\n        .map(item => `${item.name}=${item.value}`)\n        .join('&');\n};\n\n// export const fixHtmlImageSource = html => {\n//     let element = document.createElement('div');\n//     element.innerHTML = html;\n//     let imgSrcUrls = element.getElementsByTagName('img');\n//     // console.log(imgSrcUrls);\n//     for (let i = 0; i < imgSrcUrls.length; i++) {\n//         let urlValue = imgSrcUrls[i].getAttribute('src');\n//         if (urlValue) {\n//             imgSrcUrls[i].setAttribute('src', imageLink(urlValue));\n//         }\n//     }\n//     return element.outerHTML;\n// };\n\nexport const stringToArrayStructure = (str, delimiter = ',') => {\n    return str.split(delimiter).map(item => String(item).trim());\n};\n\nexport const validateEmail = email => {\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n};\nexport function dateToIsoConverter(date) {\n    return date.getUTCFullYear() + '-' + ('00' + (date.getUTCMonth() + 1)).slice(-2) + '-' + ('00' + date.getDate()).slice(-2);\n}\n"]},"metadata":{},"sourceType":"module"}