{"ast":null,"code":"import _objectSpread from \"/Users/petarpenkov/Documents/fitness-fe-master/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { WORKOUTS_NEW, GET_ALL_EXERCIESES } from 'redux/constants/main.constants';\nimport { ActionStatus } from 'redux/core/ActionStatus';\nimport { PostRequestWithData, PlainApiRequest } from 'services/apiRequests';\nimport { buildActionType } from 'redux/actions/buildActionType';\nimport { FETCH_CALENDAR } from 'redux/constants/vars.constants';\nimport { CHECK_FOR_SUBSCRIPTION, STATISTICS, USER_INFO, WORKOUTS_GET_ALL_FILTERED, WORKOUTS_GET_SUBSCRIBED, WORKOUTS_SUBSCRIBE, WORKOUTS_UPDATE } from '../constants/main.constants';\nimport { CHECK_FOR_SUBSCRIPTION_API, GET_ALL_EXERCISES_API, GET_INFO_API, GET_STATISTICS_API, SUBSCRIBE_TO_WORKOUT_API, UPDATE_INFO_API, WORKOUTS_GET_FILTERED_API, WORKOUTS_GET_SUBSCRIBED_API, WORKOUTS_NEW_API, WORKOUTS_UPDATE_API } from '../../services/api';\nexport const newWorkoutAction = workoutObj => async dispatch => {\n  console.log(workoutObj);\n  dispatch({\n    type: buildActionType(WORKOUTS_NEW, ActionStatus.START)\n  });\n  const response = await PostRequestWithData(WORKOUTS_NEW_API, workoutObj, {\n    'Content-Type': 'application/json'\n  });\n\n  if (response.success) {\n    dispatch({\n      type: buildActionType(WORKOUTS_NEW, ActionStatus.DONE),\n      payload: _objectSpread({}, response)\n    });\n  }\n};\nexport const getSubscribedWorkout = (month, year) => async dispatch => {\n  dispatch({\n    type: buildActionType(WORKOUTS_GET_SUBSCRIBED, ActionStatus.START)\n  });\n  let response;\n\n  if (!month && !year) {\n    response = await PlainApiRequest(WORKOUTS_GET_SUBSCRIBED_API);\n  } else {\n    if (month && year) {\n      response = await PlainApiRequest(`${WORKOUTS_GET_SUBSCRIBED_API}?month=${month}&year=${year}`);\n    } else if (month) {\n      response = await PlainApiRequest(`${WORKOUTS_GET_SUBSCRIBED_API}?month=${month}`);\n    } else {\n      response = await PlainApiRequest(`${WORKOUTS_GET_SUBSCRIBED_API}?year=${year}`);\n    }\n  }\n\n  if (response.success) {\n    dispatch({\n      type: buildActionType(WORKOUTS_GET_SUBSCRIBED, ActionStatus.DONE),\n      payload: _objectSpread({}, response.data)\n    });\n  }\n};\nexport const subscribeToWorkout = workoutPlanId => async dispatch => {\n  let data = new FormData();\n  data.set('workoutPlanId', workoutPlanId);\n  dispatch({\n    type: buildActionType(WORKOUTS_SUBSCRIBE, ActionStatus.START)\n  });\n  const response = await PostRequestWithData(SUBSCRIBE_TO_WORKOUT_API, data, {\n    'Content-Type': 'application/json'\n  });\n\n  if (response.success) {\n    dispatch({\n      type: buildActionType(WORKOUTS_SUBSCRIBE, ActionStatus.DONE),\n      payload: {\n        workoutPlanId\n      }\n    });\n    dispatch({\n      type: FETCH_CALENDAR,\n      payload: true\n    });\n  }\n};\nexport const getAllWorkoutsFiltered = (frequency, difficulty) => async dispatch => {\n  dispatch({\n    type: buildActionType(WORKOUTS_GET_ALL_FILTERED, ActionStatus.START)\n  });\n  const response = await PlainApiRequest(`${WORKOUTS_GET_FILTERED_API}?frequency=${frequency}&difficulty=${difficulty}`);\n\n  if (response.success) {\n    dispatch({\n      type: buildActionType(WORKOUTS_GET_ALL_FILTERED, ActionStatus.DONE),\n      payload: _objectSpread({}, response.data)\n    });\n  }\n};\nexport const getUserInfo = () => async dispatch => {\n  dispatch({\n    type: buildActionType(USER_INFO, ActionStatus.START)\n  });\n  const response = await PlainApiRequest(GET_INFO_API);\n\n  if (response.success) {\n    dispatch({\n      type: buildActionType(USER_INFO, ActionStatus.DONE),\n      payload: _objectSpread({}, response)\n    });\n  }\n};\nexport const checkForSubscription = () => async dispatch => {\n  dispatch({\n    type: buildActionType(CHECK_FOR_SUBSCRIPTION, ActionStatus.START)\n  });\n  const response = await PlainApiRequest(CHECK_FOR_SUBSCRIPTION_API);\n\n  if (response.success) {\n    dispatch({\n      type: buildActionType(CHECK_FOR_SUBSCRIPTION, ActionStatus.DONE),\n      payload: _objectSpread({}, response)\n    });\n  }\n};\nexport const resetCheckForSubscription = () => async dispatch => {\n  dispatch({\n    type: buildActionType(CHECK_FOR_SUBSCRIPTION, ActionStatus.RESET)\n  });\n};\nexport const updateUserInfo = (name, surname, image) => async dispatch => {\n  let data = new FormData();\n  data.set('name', name);\n  data.set('surname', surname);\n  data.set('image', image);\n  const response = await PostRequestWithData(UPDATE_INFO_API, data);\n\n  if (response.success) {\n    dispatch({\n      type: buildActionType(USER_INFO, ActionStatus.DONE),\n      payload: _objectSpread({}, response)\n    });\n  }\n};\nexport const getAllExercises = () => async dispatch => {\n  dispatch({\n    type: buildActionType(GET_ALL_EXERCIESES, ActionStatus.START)\n  });\n  const response = await PlainApiRequest(GET_ALL_EXERCISES_API);\n\n  if (response.success) {\n    dispatch({\n      type: buildActionType(GET_ALL_EXERCIESES, ActionStatus.DONE),\n      payload: _objectSpread({}, response)\n    });\n  }\n};\nexport const updateWorkout = (dailyWorkoutId, dateTrained, hoursSpent, isCompleted) => async dispatch => {\n  dispatch({\n    type: buildActionType(WORKOUTS_UPDATE, ActionStatus.START)\n  });\n  let data = new FormData();\n  data.set('dailyWorkoutId', dailyWorkoutId);\n  data.set('dateTrained', dateTrained);\n  data.set('hoursSpent', hoursSpent);\n  data.set('isCompleted', isCompleted);\n  const response = await PostRequestWithData(WORKOUTS_UPDATE_API, data);\n\n  if (response.success) {\n    dispatch({\n      type: buildActionType(WORKOUTS_UPDATE, ActionStatus.DONE),\n      payload: _objectSpread({}, response)\n    });\n    dispatch({\n      type: FETCH_CALENDAR,\n      payload: true\n    });\n  }\n};\nexport const getStatistics = () => async dispatch => {\n  dispatch({\n    type: buildActionType(STATISTICS, ActionStatus.START)\n  });\n  const response = await PlainApiRequest(GET_STATISTICS_API);\n\n  if (response.success) {\n    dispatch({\n      type: buildActionType(STATISTICS, ActionStatus.DONE),\n      payload: _objectSpread({}, response)\n    });\n  }\n};","map":{"version":3,"sources":["/Users/petarpenkov/Documents/fitness-fe-master/app/src/redux/actions/data.actions.js"],"names":["WORKOUTS_NEW","GET_ALL_EXERCIESES","ActionStatus","PostRequestWithData","PlainApiRequest","buildActionType","FETCH_CALENDAR","CHECK_FOR_SUBSCRIPTION","STATISTICS","USER_INFO","WORKOUTS_GET_ALL_FILTERED","WORKOUTS_GET_SUBSCRIBED","WORKOUTS_SUBSCRIBE","WORKOUTS_UPDATE","CHECK_FOR_SUBSCRIPTION_API","GET_ALL_EXERCISES_API","GET_INFO_API","GET_STATISTICS_API","SUBSCRIBE_TO_WORKOUT_API","UPDATE_INFO_API","WORKOUTS_GET_FILTERED_API","WORKOUTS_GET_SUBSCRIBED_API","WORKOUTS_NEW_API","WORKOUTS_UPDATE_API","newWorkoutAction","workoutObj","dispatch","console","log","type","START","response","success","DONE","payload","getSubscribedWorkout","month","year","data","subscribeToWorkout","workoutPlanId","FormData","set","getAllWorkoutsFiltered","frequency","difficulty","getUserInfo","checkForSubscription","resetCheckForSubscription","RESET","updateUserInfo","name","surname","image","getAllExercises","updateWorkout","dailyWorkoutId","dateTrained","hoursSpent","isCompleted","getStatistics"],"mappings":"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","sourcesContent":["import { WORKOUTS_NEW, GET_ALL_EXERCIESES } from 'redux/constants/main.constants';\nimport { ActionStatus } from 'redux/core/ActionStatus';\nimport { PostRequestWithData, PlainApiRequest } from 'services/apiRequests';\nimport { buildActionType } from 'redux/actions/buildActionType';\nimport { FETCH_CALENDAR } from 'redux/constants/vars.constants';\nimport {\n    CHECK_FOR_SUBSCRIPTION,\n    STATISTICS,\n    USER_INFO,\n    WORKOUTS_GET_ALL_FILTERED,\n    WORKOUTS_GET_SUBSCRIBED,\n    WORKOUTS_SUBSCRIBE,\n    WORKOUTS_UPDATE,\n} from '../constants/main.constants';\nimport {\n    CHECK_FOR_SUBSCRIPTION_API,\n    GET_ALL_EXERCISES_API,\n    GET_INFO_API,\n    GET_STATISTICS_API,\n    SUBSCRIBE_TO_WORKOUT_API,\n    UPDATE_INFO_API,\n    WORKOUTS_GET_FILTERED_API,\n    WORKOUTS_GET_SUBSCRIBED_API,\n    WORKOUTS_NEW_API,\n    WORKOUTS_UPDATE_API,\n} from '../../services/api';\n\nexport const newWorkoutAction = workoutObj => async dispatch => {\n    console.log(workoutObj);\n    dispatch({ type: buildActionType(WORKOUTS_NEW, ActionStatus.START) });\n    const response = await PostRequestWithData(WORKOUTS_NEW_API, workoutObj, { 'Content-Type': 'application/json' });\n\n    if (response.success) {\n        dispatch({\n            type: buildActionType(WORKOUTS_NEW, ActionStatus.DONE),\n            payload: {\n                ...response,\n            },\n        });\n    }\n};\nexport const getSubscribedWorkout = (month, year) => async dispatch => {\n    dispatch({ type: buildActionType(WORKOUTS_GET_SUBSCRIBED, ActionStatus.START) });\n    let response;\n    if (!month && !year) {\n        response = await PlainApiRequest(WORKOUTS_GET_SUBSCRIBED_API);\n    } else {\n        if (month && year) {\n            response = await PlainApiRequest(`${WORKOUTS_GET_SUBSCRIBED_API}?month=${month}&year=${year}`);\n        } else if (month) {\n            response = await PlainApiRequest(`${WORKOUTS_GET_SUBSCRIBED_API}?month=${month}`);\n        } else {\n            response = await PlainApiRequest(`${WORKOUTS_GET_SUBSCRIBED_API}?year=${year}`);\n        }\n    }\n\n    if (response.success) {\n        dispatch({\n            type: buildActionType(WORKOUTS_GET_SUBSCRIBED, ActionStatus.DONE),\n            payload: {\n                ...response.data,\n            },\n        });\n    }\n};\nexport const subscribeToWorkout = workoutPlanId => async dispatch => {\n    let data = new FormData();\n    data.set('workoutPlanId', workoutPlanId);\n\n    dispatch({ type: buildActionType(WORKOUTS_SUBSCRIBE, ActionStatus.START) });\n    const response = await PostRequestWithData(SUBSCRIBE_TO_WORKOUT_API, data, { 'Content-Type': 'application/json' });\n\n    if (response.success) {\n        dispatch({\n            type: buildActionType(WORKOUTS_SUBSCRIBE, ActionStatus.DONE),\n            payload: {\n                workoutPlanId,\n            },\n        });\n        dispatch({ type: FETCH_CALENDAR, payload: true });\n    }\n};\nexport const getAllWorkoutsFiltered = (frequency, difficulty) => async dispatch => {\n    dispatch({ type: buildActionType(WORKOUTS_GET_ALL_FILTERED, ActionStatus.START) });\n\n    const response = await PlainApiRequest(`${WORKOUTS_GET_FILTERED_API}?frequency=${frequency}&difficulty=${difficulty}`);\n\n    if (response.success) {\n        dispatch({\n            type: buildActionType(WORKOUTS_GET_ALL_FILTERED, ActionStatus.DONE),\n            payload: {\n                ...response.data,\n            },\n        });\n    }\n};\nexport const getUserInfo = () => async dispatch => {\n    dispatch({ type: buildActionType(USER_INFO, ActionStatus.START) });\n    const response = await PlainApiRequest(GET_INFO_API);\n\n    if (response.success) {\n        dispatch({\n            type: buildActionType(USER_INFO, ActionStatus.DONE),\n            payload: {\n                ...response,\n            },\n        });\n    }\n};\nexport const checkForSubscription = () => async dispatch => {\n    dispatch({ type: buildActionType(CHECK_FOR_SUBSCRIPTION, ActionStatus.START) });\n    const response = await PlainApiRequest(CHECK_FOR_SUBSCRIPTION_API);\n\n    if (response.success) {\n        dispatch({\n            type: buildActionType(CHECK_FOR_SUBSCRIPTION, ActionStatus.DONE),\n            payload: {\n                ...response,\n            },\n        });\n    }\n};\nexport const resetCheckForSubscription = () => async dispatch => {\n    dispatch({ type: buildActionType(CHECK_FOR_SUBSCRIPTION, ActionStatus.RESET) });\n};\nexport const updateUserInfo = (name, surname, image) => async dispatch => {\n    let data = new FormData();\n    data.set('name', name);\n    data.set('surname', surname);\n    data.set('image', image);\n\n    const response = await PostRequestWithData(UPDATE_INFO_API, data);\n\n    if (response.success) {\n        dispatch({\n            type: buildActionType(USER_INFO, ActionStatus.DONE),\n            payload: {\n                ...response,\n            },\n        });\n    }\n};\nexport const getAllExercises = () => async dispatch => {\n    dispatch({ type: buildActionType(GET_ALL_EXERCIESES, ActionStatus.START) });\n    const response = await PlainApiRequest(GET_ALL_EXERCISES_API);\n\n    if (response.success) {\n        dispatch({\n            type: buildActionType(GET_ALL_EXERCIESES, ActionStatus.DONE),\n            payload: {\n                ...response,\n            },\n        });\n    }\n};\nexport const updateWorkout = (dailyWorkoutId, dateTrained, hoursSpent, isCompleted) => async dispatch => {\n    dispatch({ type: buildActionType(WORKOUTS_UPDATE, ActionStatus.START) });\n\n    let data = new FormData();\n    data.set('dailyWorkoutId', dailyWorkoutId);\n    data.set('dateTrained', dateTrained);\n    data.set('hoursSpent', hoursSpent);\n    data.set('isCompleted', isCompleted);\n\n    const response = await PostRequestWithData(WORKOUTS_UPDATE_API, data);\n\n    if (response.success) {\n        dispatch({\n            type: buildActionType(WORKOUTS_UPDATE, ActionStatus.DONE),\n            payload: {\n                ...response,\n            },\n        });\n        dispatch({ type: FETCH_CALENDAR, payload: true });\n    }\n};\nexport const getStatistics = () => async dispatch => {\n    dispatch({ type: buildActionType(STATISTICS, ActionStatus.START) });\n\n    const response = await PlainApiRequest(GET_STATISTICS_API);\n\n    if (response.success) {\n        dispatch({\n            type: buildActionType(STATISTICS, ActionStatus.DONE),\n            payload: {\n                ...response,\n            },\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"module"}